export type TextMatcher = (text: string, position?: number) => string | undefined;
export declare function createRegExpTextMatcher(...regexes: RegExp[]): TextMatcher;
export declare function createStringTextMatcher(...strings: string[]): TextMatcher;
export declare const BLANKSPACE_REGEX: RegExp;
export declare const LINE_BREAK_REGEX: RegExp;
export declare const matchBlankspace: TextMatcher;
export declare const BOOL_LITERAL_REGEX: RegExp[];
export declare const INT_DEC_LITERAL_REGEX: RegExp[];
export declare const INT_HEX_LITERAL_REGEX: RegExp[];
export declare const INT_LITERAL_REGEX: RegExp[];
export declare const FLOAT_DEC_LITERAL_REGEX: RegExp[];
export declare const FLOAT_HEX_LITERAL_REGEX: RegExp[];
export declare const FLOAT_LITERAL_REGEX: RegExp[];
export declare const LITERAL_REGEX: RegExp[];
export declare const matchLiteral: TextMatcher;
export declare const IDENT_PATTERN_TOKEN_REGEX: RegExp;
export declare const matchIdentPatternToken: TextMatcher;
export declare const LINE_ENDING_COMMENT_REGEX: RegExp;
export declare const matchLineEndingComment: TextMatcher;
export declare const BLOCK_COMMENT_OPEN = "/*";
export declare const BLOCK_COMMENT_CLOSE = "*/";
export declare function matchBlockComment(text: string, start?: number): string | undefined;
