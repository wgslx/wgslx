export declare const translationUnit: import("./rules").SymbolRule;
export declare const globalDirective: import("./rules").SymbolRule;
export declare const globalDecl: import("./rules").SymbolRule;
export declare const boolLiteral: import("./rules").SymbolRule;
export declare const intLiteral: import("./rules").SymbolRule;
export declare const decimalIntLiteral: import("./rules").SymbolRule;
export declare const hexIntLiteral: import("./rules").SymbolRule;
export declare const floatLiteral: import("./rules").SymbolRule;
export declare const decimalFloatLiteral: import("./rules").SymbolRule;
export declare const hexFloatLiteral: import("./rules").SymbolRule;
export declare const diagnosticDirective: import("./rules").SymbolRule;
export declare const literal: import("./rules").SymbolRule;
export declare const ident: import("./rules").SymbolRule;
export declare const memberIdent: import("./rules").SymbolRule;
export declare const diagnosticNameToken: import("./rules").SymbolRule;
export declare const diagnosticRuleName: import("./rules").SymbolRule;
export declare const templateList: import("./rules").SymbolRule;
export declare const templateArgCommaList: import("./rules").SymbolRule;
export declare const templateArgExpression: import("./rules").SymbolRule;
export declare const alignAttr: import("./rules").SymbolRule;
export declare const bindingAttr: import("./rules").SymbolRule;
export declare const builtinAttr: import("./rules").SymbolRule;
export declare const builtinValueName: import("./rules").SymbolRule;
export declare const constAttr: import("./rules").SymbolRule;
export declare const diagnosticAttr: import("./rules").SymbolRule;
export declare const groupAttr: import("./rules").SymbolRule;
export declare const idAttr: import("./rules").SymbolRule;
export declare const interpolateAttr: import("./rules").SymbolRule;
export declare const interpolateTypeName: import("./rules").SymbolRule;
export declare const interpolateSamplingName: import("./rules").SymbolRule;
export declare const invariantAttr: import("./rules").SymbolRule;
export declare const locationAttr: import("./rules").SymbolRule;
export declare const mustUseAttr: import("./rules").SymbolRule;
export declare const sizeAttr: import("./rules").SymbolRule;
export declare const workgroupSizeAttr: import("./rules").SymbolRule;
export declare const vertexAttr: import("./rules").SymbolRule;
export declare const fragmentAttr: import("./rules").SymbolRule;
export declare const computeAttr: import("./rules").SymbolRule;
export declare const attribute: import("./rules").SymbolRule;
export declare const diagnosticControl: import("./rules").SymbolRule;
export declare const structDecl: import("./rules").SymbolRule;
export declare const structBodyDecl: import("./rules").SymbolRule;
export declare const structMember: import("./rules").SymbolRule;
export declare const typeAliasDecl: import("./rules").SymbolRule;
export declare const typeSpecifier: import("./rules").SymbolRule;
export declare const templateElaboratedIdent: import("./rules").SymbolRule;
export declare const variableOrValueStatement: import("./rules").SymbolRule;
export declare const variableDecl: import("./rules").SymbolRule;
export declare const optionallyTypedIdent: import("./rules").SymbolRule;
export declare const globalVariableDecl: import("./rules").SymbolRule;
export declare const globalValueDecl: import("./rules").SymbolRule;
export declare const primaryExpression: import("./rules").SymbolRule;
export declare const callExpression: import("./rules").SymbolRule;
export declare const callPhrase: import("./rules").SymbolRule;
export declare const parenExpression: import("./rules").SymbolRule;
export declare const argumentExpressionList: import("./rules").SymbolRule;
export declare const expressionCommaList: import("./rules").SymbolRule;
export declare const componentOrSwizzleSpecifier: import("./rules").SymbolRule;
export declare const unaryExpression: import("./rules").SymbolRule;
export declare const singularExpression: import("./rules").SymbolRule;
export declare const lhsExpression: import("./rules").SymbolRule;
export declare const coreLhsExpression: import("./rules").SymbolRule;
export declare const multiplicativeExpression: import("./rules").SymbolRule;
export declare const multiplicativeOperator: import("./rules").SymbolRule;
export declare const additiveExpression: import("./rules").SymbolRule;
export declare const additiveOperator: import("./rules").SymbolRule;
export declare const shiftExpression: import("./rules").SymbolRule;
export declare const relationalExpression: import("./rules").SymbolRule;
export declare const shortCircuitAndExpression: import("./rules").SymbolRule;
export declare const shortCircuitOrExpression: import("./rules").SymbolRule;
export declare const binaryOrExpression: import("./rules").SymbolRule;
export declare const binaryAndExpression: import("./rules").SymbolRule;
export declare const binaryXorExpression: import("./rules").SymbolRule;
export declare const bitwiseExpression: import("./rules").SymbolRule;
export declare const expression: import("./rules").SymbolRule;
export declare const compoundStatement: import("./rules").SymbolRule;
export declare const assignmentStatement: import("./rules").SymbolRule;
export declare const compoundAssignmentOperator: import("./rules").SymbolRule;
export declare const incrementStatement: import("./rules").SymbolRule;
export declare const decrementStatement: import("./rules").SymbolRule;
export declare const ifStatement: import("./rules").SymbolRule;
export declare const ifClause: import("./rules").SymbolRule;
export declare const elseIfClause: import("./rules").SymbolRule;
export declare const elseClause: import("./rules").SymbolRule;
export declare const switchStatement: import("./rules").SymbolRule;
export declare const switchBody: import("./rules").SymbolRule;
export declare const switchClause: import("./rules").SymbolRule;
export declare const caseClause: import("./rules").SymbolRule;
export declare const defaultAloneClause: import("./rules").SymbolRule;
export declare const caseSelectors: import("./rules").SymbolRule;
export declare const caseSelector: import("./rules").SymbolRule;
export declare const loopStatement: import("./rules").SymbolRule;
export declare const forStatement: import("./rules").SymbolRule;
export declare const forHeader: import("./rules").SymbolRule;
export declare const forInit: import("./rules").SymbolRule;
export declare const forUpdate: import("./rules").SymbolRule;
export declare const whileStatement: import("./rules").SymbolRule;
export declare const breakStatement: import("./rules").SymbolRule;
export declare const breakIfStatement: import("./rules").SymbolRule;
export declare const continueStatement: import("./rules").SymbolRule;
export declare const continuingStatement: import("./rules").SymbolRule;
export declare const continuingCompoundStatement: import("./rules").SymbolRule;
export declare const returnStatement: import("./rules").SymbolRule;
export declare const funcCallStatement: import("./rules").SymbolRule;
export declare const constAssertStatement: import("./rules").SymbolRule;
export declare const statement: import("./rules").SymbolRule;
export declare const variableUpdatingStatement: import("./rules").SymbolRule;
export declare const functionDecl: import("./rules").SymbolRule;
export declare const functionHeader: import("./rules").SymbolRule;
export declare const paramList: import("./rules").SymbolRule;
export declare const param: import("./rules").SymbolRule;
export declare const enableDirective: import("./rules").SymbolRule;
export declare const enableExtensionList: import("./rules").SymbolRule;
export declare const requiresDirective: import("./rules").SymbolRule;
export declare const softwareExtensionList: import("./rules").SymbolRule;
export declare const enableExtensionName: import("./rules").SymbolRule;
export declare const softwareExtensionName: import("./rules").SymbolRule;
export declare const identPatternToken: import("./rules").SymbolRule;
export declare const severityControlName: import("./rules").SymbolRule;
export declare const swizzleName: import("./rules").SymbolRule;
export declare const translationUnitExtended: import("./rules").SymbolRule;
export declare const globalDirectiveExtended: import("./rules").SymbolRule;
export declare const includeDirective: import("./rules").SymbolRule;
export declare const includePath: import("./rules").SymbolRule;
